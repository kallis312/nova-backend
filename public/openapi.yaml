openapi: 3.0.3
info:
  title: Nova Slicer Server 1.0
  description: |-
    This is the API definition for the Nova slicer server.

    Reference Link:
    - [The nova slicer server repository](https://github.com/callisto-ai)
    - [The source API definition for the Nova slicer server](https://github.com/callisto-ai)
  contact:
    email: kyosuke@callisto-ai.com
  version: 1.0.0
servers:
  - url: /api/v1
    description: "Local-Server"
  - url: http://20.78.12.2:8080/api/v1
    description: "Staging-Server"
  - url: https://nova-production-server/api/v1
    description: "Production-Server"
tags:
  - name: Auth
    description: User Authentication
  - name: Dicom
    description: DICOM Management
  - name: Annotation
    description: Annotation (automatic, AI integration)
  - name: Project
    description: Project Management
paths:
  /auth/login:
    post:
      tags:
        - Auth
      summary: Logs user into the system
      requestBody:
        $ref: "#/components/requestBodies/Login"
      responses:
        200:
          $ref: "#/components/responses/Login"
        500:
          description: Invalid username/password supplied
          content:
            application/json:
              example:
                message: not found user
              schema:
                $ref: "#/components/schemas/MessageResponse"
  /auth/register:
    post:
      tags:
        - Auth
      summary: Register user into the system
      requestBody:
        $ref: "#/components/requestBodies/Register"
      responses:
        200:
          $ref: "#/components/responses/Register"
        500:
          description: Invalid username/password supplied
          content:
            application/json:
              example:
                message: Passwords do not match
              schema:
                $ref: "#/components/schemas/MessageResponse"
  /auth/logout:
    get:
      tags:
        - Auth
      summary: Logs out current logged in user session
      description: ""
      responses:
        200:
          description: successful operation
          content:
            application/json:
              example:
                message: Logout successfully
              schema:
                $ref: "#/components/schemas/MessageResponse"
        401:
          $ref: "#/components/responses/Unauthorized"
        default:
          description: successful operation
          content:
            application/json:
              example:
                message: Logout failure
              schema:
                $ref: "#/components/schemas/MessageResponse"
      security:
        - JWTAuth: []
  /dicom/list/{page}:
    get:
      tags:
        - Dicom
      summary: Get dicom list by page number
      description: Returns dicom list
      parameters:
        - name: page
          in: path
          description: Number of page
          required: true
          schema:
            type: integer
            format: int64
            example: 1
            minimum: 1
      responses:
        200:
          $ref: "#/components/responses/DicomList"
        500:
          $ref: "#/components/responses/InternalError"
        401:
          $ref: "#/components/responses/Unauthorized"
      security:
        - JWTAuth: []
  /dicom/get/{id}:
    get:
      tags:
        - Dicom
      summary: Get a specific DICOM by ID
      description: Download DICOM file
      parameters:
        - name: id
          in: path
          description: Dicom Id
          required: true
          schema:
            type: string
            example: dicom001
      responses:
        200:
          description: Successfully
          content:
            application/json:
              example:
                message: Downloading...
              schema:
                $ref: "#/components/schemas/MessageResponse"
        500:
          $ref: "#/components/responses/InternalError"
        401:
          $ref: "#/components/responses/Unauthorized"
      security:
        - JWTAuth: []
  /dicom/annotation/{id}:
    get:
      tags:
        - Dicom
      summary: Get a annotation of a specific DICOM ID
      description: |-
        Get the annotation of a specific DICOM ID (all slices included)
      parameters:
        - name: id
          in: path
          description: Dicom Id
          required: true
          schema:
            type: string
            example: dicom001
      responses:
        200:
          description: Successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  annotatedBy:
                    type: string
                    example: callisto
                  annotatedAt:
                    type: string
                    example: 2024-07-29T08:30:16.757Z
                  slices: 
                    type: array
                    items:
                      $ref: "#/components/schemas/Slice"
        500:
          $ref: "#/components/responses/InternalError"
        401:
          $ref: "#/components/responses/Unauthorized"
      security:
        - JWTAuth: []
    post:
      tags:
        - Dicom
      summary: Update/create/save
      description: Update/create/save the annotation of a specific DICOM ID
      parameters:
        - name: id
          in: path
          description: Dicom Id
          required: true
          schema:
            type: string
            example: dicom001
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DicomAnnotation"
      responses:
        200:
          description: Successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DicomAnnotation"
        500:
          $ref: "#/components/responses/InternalError"
        401:
          $ref: "#/components/responses/Unauthorized"
      security:
        - JWTAuth: []
  /annotation/MedSAM:
    post:
      tags:
        - Annotation
      summary: Using MedSAM
      description: Send coordinates and get segmentation results using MedSAM
      requestBody:
        $ref: "#/components/requestBodies/AutoAnnotation"
      responses:
        200:
          description: Successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  segmentation:
                    type: object
                    $ref: "#/components/schemas/Segmentation"
        401:
          $ref: "#/components/responses/Unauthorized"
      security:
        - JWTAuth: []
  /annotation/Monai:
    post:
      tags:
        - Annotation
      summary: Using MedSAM
      description: This is used by jupiter to request for completely automatic annotation for a particular DICOM
      requestBody:
        $ref: "#/components/requestBodies/AutoAnnotation"
      responses:
        200:
          description: Successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  segmentation:
                    type: array
                    items:
                      $ref: "#/components/schemas/Segmentation"
        401:
          $ref: "#/components/responses/Unauthorized"
      security:
        - JWTAuth: []
components:
  responses:
    Login:
      description: Login Response
      content:
        application/json:
          schema:
            type: object
            example:
              token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6NCwidXNlcm5hbWUiOiJjYWxsaXN0byIsImlhdCI6MTcyMTg3NTI1OSwiZXhwIjoxNzIxODc4ODU5fQ.4oNPNjp4kfNotv-e2yDbfF_FqskQc3nnkmFVW5RaE1k
            properties:
              token:
                type: string
    Register:
      description: Register Response
      content:
        application/json:
          schema:
            type: object
            example:
              token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6NCwidXNlcm5hbWUiOiJjYWxsaXN0byIsImlhdCI6MTcyMTg3NTI1OSwiZXhwIjoxNzIxODc4ODU5fQ.4oNPNjp4kfNotv-e2yDbfF_FqskQc3nnkmFVW5RaE1k
            properties:
              token:
                type: string
    DicomList:
      description: Successfully
      content:
        application/json:
          schema:
            type: object
            properties:
              total:
                type: integer
                example: 100
              page:
                type: integer
                example: 1
              perPage:
                type: integer
                example: 10
              dicoms:
                type: array
                items:
                  $ref: "#/components/schemas/Dicom"
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          example:
            message: Unauthorized
    InternalError:
      description: InternalError
      content:
        application/json:
          example:
            message: An unknown error occurred
  requestBodies:
    Login:
      content:
        application/json:
          schema:
            type: object
            properties:
              username:
                type: string
                example: callisto
              password:
                type: string
                example: callisto
    Register:
      content:
        application/json:
          schema:
            type: object
            properties:
              username:
                type: string
                example: callisto
              password:
                type: string
                example: callisto
              confirmPassword:
                type: string
                example: callisto
    AutoAnnotation:
      content:
        application/json:
          schema:
            type: object
            properties:
              dicomId:
                type: string
                example: 123wf1545
              sliceIndex:
                type: number
                example: 12
  schemas:
    Dicom:
      type: object
      properties:
        id:
          type: string
          example: dicom001
        patientId:
          type: string
          example: patient001
        studyDate:
          type: string
          example: 2024-07-29T08:30:16.757Z
        modality:
          type: string
          example: MRI
        status:
          type: string
          example: unannotated
          enum:
            - unannotated
            - annotated
    DicomAnnotation:
      type: object
      properties:
        slices:
          type: array
          items:
            type: object
            $ref: "#/components/schemas/Slice"
    MessageResponse:
      type: object
      properties:
        message:
          type: string
    Slice:
      type: object
      properties:
        sliceIndex:
          type: integer
        annotations:
          type: array
          items:
            $ref: "#/components/schemas/Segmentation"
    Segmentation:
      type: object
      properties:
        type:
          type: string
          example: polygon
        label:
          type: string
          example: tumor
        points:
          type: array
          example: [[20, 13], [13, 15]]
          items:
            type: array
            items:
              type: number
            maxLength: 2
            minLength: 2

  securitySchemes:
    JWTAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
